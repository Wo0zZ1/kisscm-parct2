import pacote from 'pacote'
import graphviz from 'graphviz'
import dotenv from 'dotenv'
import Path from 'path'
import yargs from 'yargs'
import { hideBin } from 'yargs/helpers'

dotenv.config()

interface CLIOptions {
	package: string
	'package-version': string
	output: string
	ascii: boolean
	depth: number
	filter?: string
}

function parseArgs(): CLIOptions {
	try {
		const argv = yargs(hideBin(process.argv))
			.option('package', {
				alias: 'p',
				type: 'string',
				description: '–ò–º—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–≥–æ –ø–∞–∫–µ—Ç–∞',
				demandOption: true,
			})
			.option('package-version', {
				alias: 'pv',
				type: 'string',
				description: '–í–µ—Ä—Å–∏—è –ø–∞–∫–µ—Ç–∞',
				default: 'latest',
			})
			.option('output', {
				alias: 'o',
				type: 'string',
				description: '–ò–º—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∞',
				default: 'dependencies.png',
			})
			.option('ascii', {
				alias: 'a',
				type: 'boolean',
				description: '–†–µ–∂–∏–º –≤—ã–≤–æ–¥–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ ASCII-–¥–µ—Ä–µ–≤–∞',
				default: false,
			})
			.option('depth', {
				alias: 'd',
				type: 'number',
				description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
				default: Infinity,
			})
			.option('filter', {
				alias: 'f',
				type: 'string',
				description: '–ü–æ–¥—Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–æ–≤',
			})
			.example([
				[
					'$0 --package express --output expressjs-graph',
					'–ê–Ω–∞–ª–∏–∑ expressjs –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ expressjs-graph.png',
				],
				['$0 -p lodash -v 4.17.21 -a', '–ê–Ω–∞–ª–∏–∑ lodash –≤–µ—Ä—Å–∏–∏ 4.17.21 —Å ASCII –≤—ã–≤–æ–¥–æ–º'],
				[
					'$0 -p react -d 2 -f "babel"',
					'–ê–Ω–∞–ª–∏–∑ react —Å –≥–ª—É–±–∏–Ω–æ–π 2 –∏ —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ "babel"',
				],
			])
			.help()
			.alias('help', 'h')
			.parseSync()

		return argv as CLIOptions
	} catch (error) {
		console.error('‚ùå Error parsing arguments:', error)
		process.exit(1)
	}
}

function validateOptions(options: CLIOptions): void {
	if (!options.package || options.package.trim() === '')
		throw new Error('–ò–º—è –ø–∞–∫–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')

	if (options.depth < 1)
		throw new Error('–ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º')
}

function printOptions(options: CLIOptions): void {
	console.log('=== –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ===')
	console.log(`–ü–∞–∫–µ—Ç: ${options.package}`)
	console.log(`–í–µ—Ä—Å–∏—è: ${options['package-version']}`)
	console.log(`–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: ${options.output}`)
	console.log(`ASCII-–¥–µ—Ä–µ–≤–æ: ${options.ascii ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}`)
	console.log(`–ú–∞–∫—Å. –≥–ª—É–±–∏–Ω–∞: ${options.depth}`)
	console.log(`–§–∏–ª—å—Ç—Ä: ${options.filter || '–Ω–µ –∑–∞–¥–∞–Ω'}`)
	console.log('==============================')
}

class Node {
	constructor(
		public name: string,
		public version: string,
		public dependencies: Node[] = [],
	) {}
}

async function getDependencies(
	packageName: string,
	version: string = 'latest',
	maxDepth: number = 3,
	filter?: string,
): Promise<Node> {
	const cache = new Map<string, Node>()

	async function traverse(
		packageName: string,
		version: string = 'latest',
		depth: number = 0,
	): Promise<Node> {
		if (depth >= maxDepth) return new Node(packageName, version)

		const cacheKey = `${packageName}@${version}`

		if (cache.has(cacheKey)) return cache.get(cacheKey)!

		if (filter && packageName.includes(filter)) {
			console.log(`üîç –ü—Ä–æ–ø—É—â–µ–Ω –ø–∞–∫–µ—Ç (—Ñ–∏–ª—å—Ç—Ä): ${packageName}`)
			return new Node(packageName, version)
		}

		try {
			const manifest = await pacote.manifest(`${packageName}@${version}`)
			const node = new Node(packageName, manifest.version)

			cache.set(cacheKey, node)

			const dependencies = manifest.dependencies || {}

			node.dependencies = await Promise.all(
				Object.entries(dependencies).map(([name, version]) =>
					traverse(name, version, depth + 1),
				),
			)

			return node
		} catch (error) {
			console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${packageName}:`, error)
			return new Node(packageName, version)
		}
	}

	return traverse(packageName, version)
}

function generateGraph(node: Node): graphviz.Graph {
	const graph = graphviz.digraph('Dependencies')
	const visitedNodes = new Set<string>()

	function traverse(current: Node, parentNodeId: string | null = null) {
		const currentNodeId = `${current.name}\n${current.version}`

		graph.addNode(currentNodeId)
		visitedNodes.add(currentNodeId)

		const cacheKey = `${currentNodeId};${parentNodeId}`
		if (parentNodeId && !visitedNodes.has(cacheKey)) {
			graph.addEdge(parentNodeId, currentNodeId)
			visitedNodes.add(cacheKey)
		}

		current.dependencies.forEach(dependency => traverse(dependency, currentNodeId))
	}

	traverse(node)
	return graph
}

function saveGraph(graph: graphviz.Graph, fileName: string): void {
	if (!process.env.GraphVizPath) throw new Error('GraphVizPath not configured')

	graph.setGraphVizPath(process.env.GraphVizPath)
	graph.output('png', fileName)

	const fullPath = Path.resolve(process.cwd(), fileName)
	console.log('–ì—Ä–∞—Ñ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏:', fullPath)
}

function printASCIITree(node: Node, prefix: string = '', isLast: boolean = true): void {
	const connector = isLast ? '‚îî‚îÄ‚îÄ ' : '‚îú‚îÄ‚îÄ '
	console.log(prefix + connector + node.name + '@' + node.version)

	const newPrefix = prefix + (isLast ? '    ' : '‚îÇ   ')

	node.dependencies.forEach((dep, index) => {
		const isLastChild = index === node.dependencies.length - 1
		printASCIITree(dep, newPrefix, isLastChild)
	})
}

async function main() {
	try {
		console.log('üöÄ Starting dependency analyzer...')

		const options = parseArgs()

		validateOptions(options)

		printOptions(options)

		console.log('üîç –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...')
		const dependencyGraph = await getDependencies(
			options.package,
			options['package-version'],
			options.depth,
			options.filter,
		)

		if (options.ascii) {
			console.log('\nüå≥ ASCII-–¥–µ—Ä–µ–≤–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:')
			printASCIITree(dependencyGraph)
		}

		console.log('\nüìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ...')
		const graph = generateGraph(dependencyGraph)

		saveGraph(graph, options.output)

		console.log('‚úÖ –ì–æ—Ç–æ–≤–æ!')
	} catch (error) {
		console.error('üí• Error in main:', error)
	}
}

main()
